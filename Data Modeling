# After getting about 9000 rows of data, it's time to model and test the accuracies of the models..

# Importing libraries
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn import datasets

# importing final data
dataset = pd.read_csv('/Users/apoorvupadhyaya/Desktop/final_1_2')

dataset.head()
dataset = dataset.drop('Unnamed: 0', axis = 1)
dataset['winner'].value_counts()

# splitting dataset into 'X' (all columns except winner column) and 'Y' (winner column)
X = dataset.iloc[:, :-1]
Y = dataset.iloc[:, 178:179]
--------------------------------------------------
# LOGISTIC REGRESSION
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

# instantiate the model (using the default parameters)
logreg = LogisticRegression()

# fit the model with data
logreg.fit(X_train,y_train)

#
y_pred=logreg.predict(X_test)

# import the metrics class
from sklearn import metrics
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
print("Confusion matrix:")
print(cnf_matrix)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

#AUC Score
from sklearn.metrics import roc_auc_score
print("AUC Score:",roc_auc_score(y_test, y_pred))
----------------------------------------------------------
#SVM MODEL

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

# instantiate the model (using the default parameters)
from sklearn.svm import SVC # "Support Vector Classifier" 
clf = SVC(kernel='linear') 
  
# fitting x samples and y classes 
clf.fit(X_train,y_train)

# fit the model with data
y_pred=clf.predict(X_test)

# import the metrics class
from sklearn import metrics
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
print("Confusion matrix:")
print(cnf_matrix)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

#AUC Score
from sklearn.metrics import roc_auc_score
print("AUC Score:",roc_auc_score(y_test, y_pred))
----------------------------------------------------------
#GBM MODEL
from sklearn.ensemble import GradientBoostingClassifier #For Classification
from sklearn.ensemble import GradientBoostingRegressor #For Regression
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

#use GBM function
clf = GradientBoostingClassifier(n_estimators=200, learning_rate=0.5, max_depth=1)
clf.fit(X_train, y_train)
  
# fitting x samples and y classes 
clf.fit(X_train,y_train)

# fit the model with data
y_pred=clf.predict(X_test)

# import the metrics class
from sklearn import metrics
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
print("Confusion matrix:")
print(cnf_matrix)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

#AUC Score
from sklearn.metrics import roc_auc_score
print("AUC Score:",roc_auc_score(y_test, y_pred))

----------------------------------------------------------
# RANDOM FOREST MODEL

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

# instantiate the model (using the default parameters)
rf = RandomForestClassifier(n_estimators=100, random_state=0)

# fit the model with data
rf.fit(X_train,y_train)

#
y_pred=rf.predict(X_test)

# import the metrics class
from sklearn import metrics
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
print("Confusion matrix:")
print(cnf_matrix)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))

#AUC Score
from sklearn.metrics import roc_auc_score
print("AUC Score:",roc_auc_score(y_test, y_pred))
----------------------------------------------------------

